

================================================================
== Vivado HLS Report for 'image_filter_Filter2D'
================================================================
* Date:           Thu Jun 23 12:19:04 2016

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        text_isolation_ip
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.39|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+---------+-----+---------+---------+
    |    Latency    |    Interval   | Pipeline|
    | min |   max   | min |   max   |   Type  |
    +-----+---------+-----+---------+---------+
    |  222|  2092966|  222|  2092966|   none  |
    +-----+---------+-----+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------+-----+---------+-----------+-----------+-----------+-----------+----------+
        |               |    Latency    | Iteration |  Initiation Interval  |    Trip   |          |
        |   Loop Name   | min |   max   |  Latency  |  achieved |   target  |   Count   | Pipelined|
        +---------------+-----+---------+-----------+-----------+-----------+-----------+----------+
        |- loop_height  |  221|  2092965| 17 ~ 1929 |          -|          -| 13 ~ 1085 |    no    |
        | + loop_width  |   13|     1925|          5|          1|          1| 10 ~ 1922 |    yes   |
        +---------------+-----+---------+-----------+-----------+-----------+-----------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 5


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 9
* Pipeline: 1
  Pipeline-0: II = 1, D = 5, States = { 4 5 6 7 8 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp_6)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	9  / (!tmp_8)
	7  / (tmp_8)
7 --> 
	8  / true
8 --> 
	4  / true
9 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.84ns
ST_1: src_kernel_win_0_val_0_1 [1/1] 0.00ns
arrayctor.loop.i:0  %src_kernel_win_0_val_0_1 = alloca i8, align 1

ST_1: src_kernel_win_0_val_0_2 [1/1] 0.00ns
arrayctor.loop.i:1  %src_kernel_win_0_val_0_2 = alloca i8, align 1

ST_1: col_buf_0_val_0_0_3 [1/1] 0.00ns
arrayctor.loop.i:2  %col_buf_0_val_0_0_3 = alloca i8, align 1

ST_1: src_kernel_win_0_val_2_1 [1/1] 0.00ns
arrayctor.loop.i:3  %src_kernel_win_0_val_2_1 = alloca i8, align 1

ST_1: src_kernel_win_0_val_1_1 [1/1] 0.00ns
arrayctor.loop.i:4  %src_kernel_win_0_val_1_1 = alloca i8, align 1

ST_1: src_kernel_win_0_val_1_2 [1/1] 0.00ns
arrayctor.loop.i:5  %src_kernel_win_0_val_1_2 = alloca i8, align 1

ST_1: col_buf_0_val_0_0_5 [1/1] 0.00ns
arrayctor.loop.i:6  %col_buf_0_val_0_0_5 = alloca i8, align 1

ST_1: src_kernel_win_0_val_2_2 [1/1] 0.00ns
arrayctor.loop.i:7  %src_kernel_win_0_val_2_2 = alloca i8, align 1

ST_1: col_buf_0_val_0_0_6 [1/1] 0.00ns
arrayctor.loop.i:8  %col_buf_0_val_0_0_6 = alloca i8, align 1

ST_1: right_border_buf_0_val_1_2_1 [1/1] 0.00ns
arrayctor.loop.i:9  %right_border_buf_0_val_1_2_1 = alloca i8, align 1

ST_1: right_border_buf_0_val_1_2_2 [1/1] 0.00ns
arrayctor.loop.i:10  %right_border_buf_0_val_1_2_2 = alloca i8, align 1

ST_1: right_border_buf_0_val_1_2_7 [1/1] 0.00ns
arrayctor.loop.i:11  %right_border_buf_0_val_1_2_7 = alloca i8, align 1

ST_1: stg_22 [1/1] 0.00ns
arrayctor.loop.i:12  call void (...)* @_ssdm_op_SpecInterface(i8* %p_dst_data_stream_V, [8 x i8]* @str187, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str188, [1 x i8]* @str188, [8 x i8]* @str187)

ST_1: stg_23 [1/1] 0.00ns
arrayctor.loop.i:13  call void (...)* @_ssdm_op_SpecInterface(i8* %p_src_data_stream_V, [8 x i8]* @str183, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str184, [1 x i8]* @str184, [8 x i8]* @str183)

ST_1: p_src_cols_V_read_1 [1/1] 0.00ns
arrayctor.loop.i:14  %p_src_cols_V_read_1 = call i12 @_ssdm_op_Read.ap_auto.i12(i12 %p_src_cols_V_read)

ST_1: p_src_rows_V_read_1 [1/1] 0.00ns
arrayctor.loop.i:15  %p_src_rows_V_read_1 = call i12 @_ssdm_op_Read.ap_auto.i12(i12 %p_src_rows_V_read)

ST_1: k_buf_0_val_0 [1/1] 0.00ns
arrayctor.loop.i:16  %k_buf_0_val_0 = alloca [1920 x i8], align 1

ST_1: k_buf_0_val_1 [1/1] 0.00ns
arrayctor.loop.i:17  %k_buf_0_val_1 = alloca [1920 x i8], align 1

ST_1: k_buf_0_val_2 [1/1] 0.00ns
arrayctor.loop.i:18  %k_buf_0_val_2 = alloca [1920 x i8], align 1

ST_1: right_border_buf_0_val_0_0 [1/1] 0.00ns
arrayctor.loop.i:19  %right_border_buf_0_val_0_0 = alloca i8, align 1

ST_1: right_border_buf_0_val_0_1 [1/1] 0.00ns
arrayctor.loop.i:20  %right_border_buf_0_val_0_1 = alloca i8, align 1

ST_1: right_border_buf_0_val_0_2 [1/1] 0.00ns
arrayctor.loop.i:21  %right_border_buf_0_val_0_2 = alloca i8, align 1

ST_1: col_buf_0_val_0_0 [1/1] 0.00ns
arrayctor.loop.i:22  %col_buf_0_val_0_0 = alloca i8, align 1

ST_1: tmp_1 [1/1] 0.00ns
arrayctor.loop.i:23  %tmp_1 = trunc i12 %p_src_rows_V_read_1 to i11

ST_1: tmp_2 [1/1] 0.00ns
arrayctor.loop.i:24  %tmp_2 = trunc i12 %p_src_cols_V_read_1 to i11

ST_1: stg_35 [1/1] 0.00ns
arrayctor.loop.i:25  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1, i64 1)

ST_1: rbegin_i_i [1/1] 0.00ns
arrayctor.loop.i:26  %rbegin_i_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([61 x i8]* @p_str15) nounwind

ST_1: rend_i_i [1/1] 0.00ns
arrayctor.loop.i:27  %rend_i_i = call i32 (...)* @_ssdm_op_SpecRegionEnd([61 x i8]* @p_str15, i32 %rbegin_i_i) nounwind

ST_1: stg_38 [1/1] 0.00ns
arrayctor.loop.i:28  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1, i64 1)

ST_1: rbegin_i243_i [1/1] 0.00ns
arrayctor.loop.i:29  %rbegin_i243_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([58 x i8]* @p_str29) nounwind

ST_1: rend_i244_i [1/1] 0.00ns
arrayctor.loop.i:30  %rend_i244_i = call i32 (...)* @_ssdm_op_SpecRegionEnd([58 x i8]* @p_str29, i32 %rbegin_i243_i) nounwind

ST_1: stg_41 [1/1] 0.00ns
arrayctor.loop.i:31  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1, i64 1)

ST_1: rbegin_i245_i [1/1] 0.00ns
arrayctor.loop.i:32  %rbegin_i245_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([58 x i8]* @p_str39) nounwind

ST_1: rend_i246_i [1/1] 0.00ns
arrayctor.loop.i:33  %rend_i246_i = call i32 (...)* @_ssdm_op_SpecRegionEnd([58 x i8]* @p_str39, i32 %rbegin_i245_i) nounwind

ST_1: stg_44 [1/1] 0.00ns
arrayctor.loop.i:34  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1, i64 1)

ST_1: heightloop [1/1] 1.84ns
arrayctor.loop.i:35  %heightloop = add i11 %tmp_1, 5

ST_1: widthloop [1/1] 1.84ns
arrayctor.loop.i:36  %widthloop = add i11 %tmp_2, 2

ST_1: tmp_4 [1/1] 1.84ns
arrayctor.loop.i:37  %tmp_4 = add i11 %tmp_2, -3

ST_1: tmp_17_cast [1/1] 0.00ns
arrayctor.loop.i:38  %tmp_17_cast = zext i11 %tmp_4 to i12

ST_1: tmp_3 [1/1] 0.00ns
arrayctor.loop.i:39  %tmp_3 = trunc i12 %p_src_cols_V_read_1 to i2

ST_1: p_neg226_i_cast [1/1] 1.37ns
arrayctor.loop.i:40  %p_neg226_i_cast = xor i2 %tmp_3, -1

ST_1: ref [1/1] 1.84ns
arrayctor.loop.i:41  %ref = add i11 %tmp_1, -1

ST_1: ref_cast [1/1] 0.00ns
arrayctor.loop.i:42  %ref_cast = zext i11 %ref to i12

ST_1: len_cast4_i_cast [1/1] 0.00ns
arrayctor.loop.i:43  %len_cast4_i_cast = zext i11 %tmp_2 to i12

ST_1: tmp_5 [1/1] 0.00ns
arrayctor.loop.i:44  %tmp_5 = shl i12 %p_src_cols_V_read_1, 1

ST_1: tmp_4_cast_i_cast [1/1] 0.00ns
arrayctor.loop.i:45  %tmp_4_cast_i_cast = zext i12 %tmp_5 to i13

ST_1: tmp_5_i [1/1] 1.84ns
arrayctor.loop.i:46  %tmp_5_i = add i13 %tmp_4_cast_i_cast, -2

ST_1: tmp_5_cast_i [1/1] 0.00ns
arrayctor.loop.i:47  %tmp_5_cast_i = sext i13 %tmp_5_i to i15

ST_1: len_cast4_i30_cast [1/1] 0.00ns
arrayctor.loop.i:48  %len_cast4_i30_cast = zext i11 %tmp_1 to i12

ST_1: tmp_10 [1/1] 0.00ns
arrayctor.loop.i:49  %tmp_10 = shl i12 %p_src_rows_V_read_1, 1

ST_1: tmp_4_cast_i46_cast [1/1] 0.00ns
arrayctor.loop.i:50  %tmp_4_cast_i46_cast = zext i12 %tmp_10 to i13

ST_1: tmp_5_i1 [1/1] 1.84ns
arrayctor.loop.i:51  %tmp_5_i1 = add i13 %tmp_4_cast_i46_cast, 2

ST_1: tmp_11 [1/1] 0.00ns
arrayctor.loop.i:52  %tmp_11 = trunc i12 %p_src_rows_V_read_1 to i1

ST_1: tmp_4_i2 [1/1] 0.00ns
arrayctor.loop.i:53  %tmp_4_i2 = call i2 @_ssdm_op_BitConcatenate.i2.i1.i1(i1 %tmp_11, i1 false)

ST_1: tmp_5_i2 [1/1] 1.37ns
arrayctor.loop.i:54  %tmp_5_i2 = xor i2 %tmp_4_i2, -2

ST_1: stg_65 [1/1] 1.57ns
arrayctor.loop.i:55  br label %0


 <State 2>: 8.09ns
ST_2: p_012_0_i [1/1] 0.00ns
:0  %p_012_0_i = phi i11 [ 0, %arrayctor.loop.i ], [ %i_V, %5 ]

ST_2: tmp_18_cast [1/1] 0.00ns
:1  %tmp_18_cast = zext i11 %p_012_0_i to i12

ST_2: tmp_6 [1/1] 2.11ns
:2  %tmp_6 = icmp ult i11 %p_012_0_i, %heightloop

ST_2: stg_69 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 13, i64 1085, i64 0)

ST_2: i_V [1/1] 1.84ns
:4  %i_V = add i11 %p_012_0_i, 1

ST_2: stg_71 [1/1] 0.00ns
:5  br i1 %tmp_6, label %1, label %"filter<0, 0, ap_int<8>, int, 1080, 1920, 3, 3>.exit"

ST_2: tmp_7 [1/1] 2.11ns
:2  %tmp_7 = icmp ugt i11 %p_012_0_i, 4

ST_2: ImagLoc_y [1/1] 1.84ns
:3  %ImagLoc_y = add i12 %tmp_18_cast, -4

ST_2: tmp_s [1/1] 2.14ns
:4  %tmp_s = icmp slt i12 %ImagLoc_y, -1

ST_2: tmp_12 [1/1] 0.00ns
:5  %tmp_12 = call i11 @_ssdm_op_PartSelect.i11.i12.i32.i32(i12 %ImagLoc_y, i32 1, i32 11)

ST_2: icmp [1/1] 2.11ns
:6  %icmp = icmp sgt i11 %tmp_12, 0

ST_2: tmp_14 [1/1] 2.14ns
:7  %tmp_14 = icmp slt i12 %ImagLoc_y, %ref_cast

ST_2: or_cond6 [1/1] 1.37ns
:8  %or_cond6 = and i1 %icmp, %tmp_14

ST_2: tmp_15 [1/1] 0.00ns
:9  %tmp_15 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %ImagLoc_y, i32 11)

ST_2: p_i [1/1] 1.37ns
:10  %p_i = select i1 %tmp_14, i11 2, i11 %ref

ST_2: tmp_i1 [1/1] 2.14ns
:11  %tmp_i1 = icmp slt i12 %ImagLoc_y, %len_cast4_i30_cast

ST_2: tmp_16 [1/1] 0.00ns
:12  %tmp_16 = trunc i12 %ImagLoc_y to i11

ST_2: p_p2_cast1_i40_cast [1/1] 0.00ns
:13  %p_p2_cast1_i40_cast = zext i11 %tmp_16 to i13

ST_2: tmp_3_i1 [1/1] 2.11ns
:14  %tmp_3_i1 = icmp ult i11 %tmp_16, %tmp_1

ST_2: p_assign_2 [1/1] 1.96ns
:15  %p_assign_2 = sub i13 %tmp_5_i1, %p_p2_cast1_i40_cast

ST_2: sel_tmp6_i1 [1/1] 1.37ns
:16  %sel_tmp6_i1 = xor i1 %tmp_i1, true

ST_2: sel_tmp7_i1 [1/1] 1.37ns
:17  %sel_tmp7_i1 = and i1 %tmp_3_i1, %sel_tmp6_i1

ST_2: tmp_19 [1/1] 0.00ns
:18  %tmp_19 = trunc i11 %p_i to i2

ST_2: tmp_21 [1/1] 0.00ns
:19  %tmp_21 = trunc i12 %ImagLoc_y to i2

ST_2: tmp_22 [1/1] 0.00ns
:20  %tmp_22 = trunc i12 %ImagLoc_y to i2

ST_2: tmp_23 [1/1] 0.00ns
:21  %tmp_23 = trunc i13 %p_assign_2 to i2

ST_2: tmp_24 [1/1] 1.37ns
:22  %tmp_24 = select i1 %tmp_i1, i2 %tmp_22, i2 %tmp_23

ST_2: tmp_25 [1/1] 1.37ns
:23  %tmp_25 = select i1 %sel_tmp7_i1, i2 %tmp_21, i2 %tmp_24

ST_2: y_1 [1/1] 1.84ns
:27  %y_1 = add i12 %tmp_18_cast, -5

ST_2: tmp_27 [1/1] 0.00ns
:28  %tmp_27 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %y_1, i32 11)

ST_2: rev [1/1] 1.37ns
:29  %rev = xor i1 %tmp_27, true

ST_2: tmp_i2 [1/1] 2.14ns
:30  %tmp_i2 = icmp slt i12 %y_1, %len_cast4_i30_cast

ST_2: or_cond_i2 [1/1] 1.37ns
:31  %or_cond_i2 = and i1 %tmp_i2, %rev

ST_2: tmp_29 [1/1] 0.00ns
:32  %tmp_29 = trunc i12 %y_1 to i2

ST_2: tmp_30 [1/1] 0.00ns
:33  %tmp_30 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %y_1, i32 11)

ST_2: p_assign_3 [1/1] 1.84ns
:34  %p_assign_3 = sub i12 5, %tmp_18_cast

ST_2: p_p2_i1 [1/1] 1.37ns
:35  %p_p2_i1 = select i1 %tmp_30, i12 %p_assign_3, i12 %y_1

ST_2: tmp_31 [1/1] 0.00ns
:36  %tmp_31 = trunc i12 %p_p2_i1 to i2

ST_2: tmp_3_i2 [1/1] 2.14ns
:37  %tmp_3_i2 = icmp ult i12 %p_p2_i1, %len_cast4_i30_cast

ST_2: p_assign_1_cast_i [1/1] 0.80ns
:38  %p_assign_1_cast_i = sub i2 %tmp_5_i2, %tmp_31

ST_2: sel_tmp_i2 [1/1] 1.37ns
:39  %sel_tmp_i2 = select i1 %or_cond_i2, i2 %tmp_29, i2 %p_assign_1_cast_i

ST_2: tmp_i2_not [1/1] 1.37ns
:40  %tmp_i2_not = xor i1 %tmp_i2, true

ST_2: sel_tmp6_i2 [1/1] 1.37ns
:41  %sel_tmp6_i2 = or i1 %tmp_27, %tmp_i2_not

ST_2: sel_tmp7_i2 [1/1] 1.37ns
:42  %sel_tmp7_i2 = and i1 %tmp_3_i2, %sel_tmp6_i2

ST_2: tmp_32 [1/1] 0.00ns
:44  %tmp_32 = trunc i11 %p_i to i2

ST_2: y_1_1 [1/1] 1.84ns
:48  %y_1_1 = add i12 %tmp_18_cast, -6

ST_2: tmp_33 [1/1] 0.00ns
:49  %tmp_33 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %y_1_1, i32 11)

ST_2: rev1 [1/1] 1.37ns
:50  %rev1 = xor i1 %tmp_33, true

ST_2: tmp_i3 [1/1] 2.14ns
:51  %tmp_i3 = icmp slt i12 %y_1_1, %len_cast4_i30_cast

ST_2: or_cond_i3 [1/1] 1.37ns
:52  %or_cond_i3 = and i1 %tmp_i3, %rev1

ST_2: tmp_34 [1/1] 0.00ns
:53  %tmp_34 = trunc i12 %y_1_1 to i2

ST_2: tmp_35 [1/1] 0.00ns
:54  %tmp_35 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %y_1_1, i32 11)

ST_2: p_assign_4 [1/1] 1.84ns
:55  %p_assign_4 = sub i12 6, %tmp_18_cast

ST_2: p_p2_i2 [1/1] 1.37ns
:56  %p_p2_i2 = select i1 %tmp_35, i12 %p_assign_4, i12 %y_1_1

ST_2: tmp_36 [1/1] 0.00ns
:57  %tmp_36 = trunc i12 %p_p2_i2 to i2

ST_2: tmp_3_i3 [1/1] 2.14ns
:58  %tmp_3_i3 = icmp ult i12 %p_p2_i2, %len_cast4_i30_cast

ST_2: p_assign_1_cast_i1 [1/1] 0.80ns
:59  %p_assign_1_cast_i1 = sub i2 %tmp_5_i2, %tmp_36

ST_2: tmp_i3_not [1/1] 1.37ns
:60  %tmp_i3_not = xor i1 %tmp_i3, true

ST_2: sel_tmp6_i3 [1/1] 1.37ns
:61  %sel_tmp6_i3 = or i1 %tmp_33, %tmp_i3_not

ST_2: sel_tmp7_i3 [1/1] 1.37ns
:62  %sel_tmp7_i3 = and i1 %tmp_3_i3, %sel_tmp6_i3

ST_2: newSel [1/1] 1.37ns
:63  %newSel = select i1 %or_cond_i3, i2 %tmp_34, i2 %p_assign_1_cast_i1

ST_2: brmerge [1/1] 1.37ns
:66  %brmerge = or i1 %tmp_s, %or_cond6

ST_2: stg_128 [1/1] 0.00ns
filter<0, 0, ap_int<8>, int, 1080, 1920, 3, 3>.exit:0  ret void


 <State 3>: 3.53ns
ST_3: stg_129 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str1813) nounwind

ST_3: tmp [1/1] 0.00ns
:1  %tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str1813)

ST_3: tmp_26 [1/1] 0.80ns
:24  %tmp_26 = sub i2 %tmp_19, %tmp_25

ST_3: sel_tmp8 [1/1] 1.36ns
:25  %sel_tmp8 = icmp eq i2 %tmp_19, %tmp_25

ST_3: sel_tmp1 [1/1] 1.36ns
:26  %sel_tmp1 = icmp eq i2 %tmp_26, 1

ST_3: p_assign_2_i2 [1/1] 1.37ns
:43  %p_assign_2_i2 = select i1 %sel_tmp7_i2, i2 %tmp_31, i2 %sel_tmp_i2

ST_3: locy_1_t [1/1] 0.80ns
:45  %locy_1_t = sub i2 %tmp_32, %p_assign_2_i2

ST_3: sel_tmp3 [1/1] 1.36ns
:46  %sel_tmp3 = icmp eq i2 %tmp_32, %p_assign_2_i2

ST_3: sel_tmp5 [1/1] 1.36ns
:47  %sel_tmp5 = icmp eq i2 %locy_1_t, 1

ST_3: newSel1 [1/1] 1.37ns
:64  %newSel1 = select i1 %sel_tmp7_i3, i2 %tmp_36, i2 %newSel

ST_3: locy_2_t [1/1] 0.80ns
:65  %locy_2_t = sub i2 %tmp_32, %newSel1

ST_3: stg_140 [1/1] 1.57ns
:67  br label %2


 <State 4>: 8.09ns
ST_4: p_025_0_i [1/1] 0.00ns
:0  %p_025_0_i = phi i11 [ 0, %1 ], [ %j_V, %._crit_edge238.i ]

ST_4: tmp_21_cast [1/1] 0.00ns
:4  %tmp_21_cast = zext i11 %p_025_0_i to i12

ST_4: tmp_8 [1/1] 2.11ns
:5  %tmp_8 = icmp ult i11 %p_025_0_i, %widthloop

ST_4: j_V [1/1] 1.84ns
:7  %j_V = add i11 %p_025_0_i, 1

ST_4: stg_145 [1/1] 0.00ns
:8  br i1 %tmp_8, label %.critedge.i, label %5

ST_4: tmp_37 [1/1] 0.00ns
.critedge.i:3  %tmp_37 = call i10 @_ssdm_op_PartSelect.i10.i11.i32.i32(i11 %p_025_0_i, i32 1, i32 10)

ST_4: icmp1 [1/1] 2.07ns
.critedge.i:4  %icmp1 = icmp ne i10 %tmp_37, 0

ST_4: or_cond219_i [1/1] 1.37ns
.critedge.i:5  %or_cond219_i = and i1 %tmp_7, %icmp1

ST_4: ImagLoc_x [1/1] 1.84ns
.critedge.i:7  %ImagLoc_x = add i12 %tmp_21_cast, -1

ST_4: tmp_38 [1/1] 0.00ns
.critedge.i:8  %tmp_38 = trunc i12 %ImagLoc_x to i2

ST_4: tmp_39 [1/1] 0.00ns
.critedge.i:9  %tmp_39 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %ImagLoc_x, i32 11)

ST_4: rev2 [1/1] 1.37ns
.critedge.i:10  %rev2 = xor i1 %tmp_39, true

ST_4: tmp_i [1/1] 2.14ns
.critedge.i:11  %tmp_i = icmp slt i12 %ImagLoc_x, %len_cast4_i_cast

ST_4: or_cond_i1 [1/1] 1.37ns
.critedge.i:12  %or_cond_i1 = and i1 %tmp_i, %rev2

ST_4: tmp_40 [1/1] 0.00ns
.critedge.i:14  %tmp_40 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %ImagLoc_x, i32 11)

ST_4: p_assign [1/1] 1.84ns
.critedge.i:15  %p_assign = sub i12 1, %tmp_21_cast

ST_4: p_p2_i [1/1] 1.37ns
.critedge.i:16  %p_p2_i = select i1 %tmp_40, i12 %p_assign, i12 %ImagLoc_x

ST_4: tmp_3_i [1/1] 2.14ns
.critedge.i:19  %tmp_3_i = icmp ult i12 %p_p2_i, %len_cast4_i_cast

ST_4: tmp_i_not [1/1] 1.37ns
.critedge.i:22  %tmp_i_not = xor i1 %tmp_i, true

ST_4: sel_tmp6_i [1/1] 1.37ns
.critedge.i:23  %sel_tmp6_i = or i1 %tmp_39, %tmp_i_not

ST_4: sel_tmp7_i [1/1] 1.37ns
.critedge.i:24  %sel_tmp7_i = and i1 %tmp_3_i, %sel_tmp6_i

ST_4: stg_162 [1/1] 0.00ns
.critedge.i:36  br i1 %brmerge, label %._crit_edge.i, label %._crit_edge228.i

ST_4: stg_163 [1/1] 0.00ns
._crit_edge228.i:0  br i1 %tmp_15, label %.loopexit222.i, label %"operator().exit.i2.0_ifconv"

ST_4: stg_164 [1/1] 1.62ns
operator().exit.i2.0_ifconv:4  switch i2 %locy_2_t, label %branch8 [
    i2 0, label %branch6
    i2 1, label %.loopexit222.i.pre80
  ]

ST_4: tmp_17 [1/1] 2.11ns
._crit_edge.i:0  %tmp_17 = icmp ne i11 %p_025_0_i, 0

ST_4: tmp_18 [1/1] 2.14ns
._crit_edge.i:1  %tmp_18 = icmp slt i12 %ImagLoc_x, %p_src_cols_V_read_1

ST_4: or_cond7 [1/1] 1.37ns
._crit_edge.i:2  %or_cond7 = and i1 %tmp_17, %tmp_18

ST_4: stg_168 [1/1] 0.00ns
._crit_edge.i:3  br i1 %or_cond7, label %3, label %._crit_edge231.i

ST_4: stg_169 [1/1] 0.00ns
._crit_edge231.i:0  br i1 %tmp_40, label %.loopexit222.i.pre, label %4

ST_4: stg_170 [1/1] 0.00ns
:0  br i1 %tmp_18, label %.loopexit222.i, label %.preheader.preheader.i

ST_4: tmp_20 [1/1] 2.14ns
:0  %tmp_20 = icmp slt i12 %ImagLoc_x, %tmp_17_cast

ST_4: stg_172 [1/1] 0.00ns
:1  br i1 %tmp_20, label %._crit_edge234.i.1.critedge.critedge, label %"operator().exit283.i"

ST_4: col_assign [1/1] 0.80ns
operator().exit283.i:0  %col_assign = add i2 %tmp_38, %p_neg226_i_cast

ST_4: stg_174 [1/1] 1.62ns
operator().exit283.i:1  switch i2 %col_assign, label %branch14 [
    i2 0, label %branch12
    i2 1, label %branch13
  ]


 <State 5>: 7.09ns
ST_5: p_cast_i_cast [1/1] 0.00ns
.critedge.i:13  %p_cast_i_cast = sext i12 %ImagLoc_x to i15

ST_5: p_p2_i_cast [1/1] 0.00ns
.critedge.i:17  %p_p2_i_cast = sext i12 %p_p2_i to i14

ST_5: p_p2_cast1_i_cast [1/1] 0.00ns
.critedge.i:18  %p_p2_cast1_i_cast = zext i14 %p_p2_i_cast to i15

ST_5: p_assign_1 [1/1] 1.96ns
.critedge.i:20  %p_assign_1 = sub i15 %tmp_5_cast_i, %p_p2_cast1_i_cast

ST_5: sel_tmp_i [1/1] 1.37ns
.critedge.i:21  %sel_tmp_i = select i1 %or_cond_i1, i15 %p_cast_i_cast, i15 %p_assign_1

ST_5: p_assign_2_i [1/1] 1.37ns
.critedge.i:25  %p_assign_2_i = select i1 %sel_tmp7_i, i15 %p_p2_cast1_i_cast, i15 %sel_tmp_i

ST_5: x [1/1] 0.00ns
.critedge.i:26  %x = sext i15 %p_assign_2_i to i32

ST_5: tmp_41 [1/1] 0.00ns
.critedge.i:27  %tmp_41 = trunc i15 %p_assign_2_i to i2

ST_5: tmp_13 [1/1] 0.00ns
.critedge.i:28  %tmp_13 = zext i32 %x to i64

ST_5: k_buf_0_val_0_addr [1/1] 0.00ns
.critedge.i:29  %k_buf_0_val_0_addr = getelementptr [1920 x i8]* %k_buf_0_val_0, i64 0, i64 %tmp_13

ST_5: right_border_buf_0_val_2_0 [2/2] 2.39ns
.critedge.i:30  %right_border_buf_0_val_2_0 = load i8* %k_buf_0_val_0_addr, align 1

ST_5: k_buf_0_val_1_addr [1/1] 0.00ns
.critedge.i:32  %k_buf_0_val_1_addr = getelementptr [1920 x i8]* %k_buf_0_val_1, i64 0, i64 %tmp_13

ST_5: right_border_buf_0_val_1_0 [2/2] 2.39ns
.critedge.i:33  %right_border_buf_0_val_1_0 = load i8* %k_buf_0_val_1_addr, align 1

ST_5: k_buf_0_val_2_addr [1/1] 0.00ns
.critedge.i:34  %k_buf_0_val_2_addr = getelementptr [1920 x i8]* %k_buf_0_val_2, i64 0, i64 %tmp_13

ST_5: src_kernel_win_0_val_2_0 [2/2] 2.39ns
.critedge.i:35  %src_kernel_win_0_val_2_0 = load i8* %k_buf_0_val_2_addr, align 1

ST_5: stg_190 [1/1] 0.00ns
.loopexit222.i.pre80:3  br label %.loopexit222.i

ST_5: stg_191 [1/1] 0.00ns
branch6:3  br label %.loopexit222.i

ST_5: stg_192 [1/1] 0.00ns
branch8:3  br label %.loopexit222.i

ST_5: col_assign_2 [1/1] 0.80ns
.preheader.preheader.i:6  %col_assign_2 = add i2 %tmp_41, %p_neg226_i_cast

ST_5: stg_194 [1/1] 0.00ns
branch10:4  br label %.loopexit222.i

ST_5: stg_195 [1/1] 0.00ns
branch9:4  br label %.loopexit222.i

ST_5: stg_196 [1/1] 0.00ns
branch11:4  br label %.loopexit222.i

ST_5: stg_197 [1/1] 0.00ns
.loopexit222.i.pre:3  br label %.loopexit222.i

ST_5: stg_198 [1/1] 0.00ns
._crit_edge234.i.1:5  br label %.loopexit222.i


 <State 6>: 6.70ns
ST_6: src_kernel_win_0_val_0_1_6 [1/1] 0.00ns
:1  %src_kernel_win_0_val_0_1_6 = load i8* %src_kernel_win_0_val_0_1, align 1

ST_6: src_kernel_win_0_val_2_1_9 [1/1] 0.00ns
:2  %src_kernel_win_0_val_2_1_9 = load i8* %src_kernel_win_0_val_2_1, align 1

ST_6: src_kernel_win_0_val_1_1_6 [1/1] 0.00ns
:3  %src_kernel_win_0_val_1_1_6 = load i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_202 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 1922, i64 0)

ST_6: stg_203 [1/1] 0.00ns
.critedge.i:0  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str1814) nounwind

ST_6: tmp_9 [1/1] 0.00ns
.critedge.i:1  %tmp_9 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str1814)

ST_6: stg_205 [1/1] 0.00ns
.critedge.i:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_6: stg_206 [1/1] 0.00ns
.critedge.i:6  call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str1830) nounwind

ST_6: right_border_buf_0_val_2_0 [1/2] 2.39ns
.critedge.i:30  %right_border_buf_0_val_2_0 = load i8* %k_buf_0_val_0_addr, align 1

ST_6: stg_208 [1/1] 0.00ns
.critedge.i:31  store i8 %right_border_buf_0_val_2_0, i8* %col_buf_0_val_0_0, align 1

ST_6: right_border_buf_0_val_1_0 [1/2] 2.39ns
.critedge.i:33  %right_border_buf_0_val_1_0 = load i8* %k_buf_0_val_1_addr, align 1

ST_6: src_kernel_win_0_val_2_0 [1/2] 2.39ns
.critedge.i:35  %src_kernel_win_0_val_2_0 = load i8* %k_buf_0_val_2_addr, align 1

ST_6: sel_tmp9 [1/1] 1.37ns
operator().exit.i2.0_ifconv:0  %sel_tmp9 = select i1 %sel_tmp8, i8 %right_border_buf_0_val_2_0, i8 %src_kernel_win_0_val_2_0

ST_6: src_kernel_win_0_val_0_0 [1/1] 1.37ns
operator().exit.i2.0_ifconv:1  %src_kernel_win_0_val_0_0 = select i1 %sel_tmp1, i8 %right_border_buf_0_val_1_0, i8 %sel_tmp9

ST_6: sel_tmp4 [1/1] 1.37ns
operator().exit.i2.0_ifconv:2  %sel_tmp4 = select i1 %sel_tmp3, i8 %right_border_buf_0_val_2_0, i8 %src_kernel_win_0_val_2_0

ST_6: src_kernel_win_0_val_1_0 [1/1] 1.37ns
operator().exit.i2.0_ifconv:3  %src_kernel_win_0_val_1_0 = select i1 %sel_tmp5, i8 %right_border_buf_0_val_1_0, i8 %sel_tmp4

ST_6: stg_215 [1/1] 1.57ns
.loopexit222.i.pre80:0  store i8 %src_kernel_win_0_val_1_0, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_216 [1/1] 1.94ns
.loopexit222.i.pre80:1  store i8 %right_border_buf_0_val_1_0, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_217 [1/1] 1.57ns
.loopexit222.i.pre80:2  store i8 %src_kernel_win_0_val_0_0, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: stg_218 [1/1] 1.57ns
branch6:0  store i8 %src_kernel_win_0_val_1_0, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_219 [1/1] 1.94ns
branch6:1  store i8 %right_border_buf_0_val_2_0, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_220 [1/1] 1.57ns
branch6:2  store i8 %src_kernel_win_0_val_0_0, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: stg_221 [1/1] 1.57ns
branch8:0  store i8 %src_kernel_win_0_val_1_0, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_222 [1/1] 1.94ns
branch8:1  store i8 %src_kernel_win_0_val_2_0, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_223 [1/1] 1.57ns
branch8:2  store i8 %src_kernel_win_0_val_0_0, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: col_buf_0_val_0_0_3_load [1/1] 0.00ns
.preheader.preheader.i:0  %col_buf_0_val_0_0_3_load = load i8* %col_buf_0_val_0_0_3, align 1

ST_6: col_buf_0_val_0_0_5_load [1/1] 0.00ns
.preheader.preheader.i:1  %col_buf_0_val_0_0_5_load = load i8* %col_buf_0_val_0_0_5, align 1

ST_6: col_buf_0_val_0_0_6_load [1/1] 0.00ns
.preheader.preheader.i:2  %col_buf_0_val_0_0_6_load = load i8* %col_buf_0_val_0_0_6, align 1

ST_6: right_border_buf_0_val_1_2_3_34 [1/1] 0.00ns
.preheader.preheader.i:3  %right_border_buf_0_val_1_2_3_34 = load i8* %right_border_buf_0_val_1_2_1, align 1

ST_6: right_border_buf_0_val_1_2_4_35 [1/1] 0.00ns
.preheader.preheader.i:4  %right_border_buf_0_val_1_2_4_35 = load i8* %right_border_buf_0_val_1_2_2, align 1

ST_6: right_border_buf_0_val_1_2_5_36 [1/1] 0.00ns
.preheader.preheader.i:5  %right_border_buf_0_val_1_2_5_36 = load i8* %right_border_buf_0_val_1_2_7, align 1

ST_6: sel_tmp [1/1] 1.36ns
.preheader.preheader.i:7  %sel_tmp = icmp eq i2 %col_assign_2, 1

ST_6: col_buf_0_val_0_0_2 [1/1] 1.37ns
.preheader.preheader.i:8  %col_buf_0_val_0_0_2 = select i1 %sel_tmp, i8 %col_buf_0_val_0_0_5_load, i8 %col_buf_0_val_0_0_3_load

ST_6: sel_tmp2 [1/1] 1.36ns
.preheader.preheader.i:9  %sel_tmp2 = icmp eq i2 %col_assign_2, 0

ST_6: col_buf_0_val_0_0_9 [1/1] 1.37ns
.preheader.preheader.i:10  %col_buf_0_val_0_0_9 = select i1 %sel_tmp2, i8 %col_buf_0_val_0_0_6_load, i8 %col_buf_0_val_0_0_2

ST_6: right_border_buf_0_val_1_2 [1/1] 1.37ns
.preheader.preheader.i:11  %right_border_buf_0_val_1_2 = select i1 %sel_tmp, i8 %right_border_buf_0_val_1_2_4_35, i8 %right_border_buf_0_val_1_2_5_36

ST_6: right_border_buf_0_val_1_2_11 [1/1] 1.37ns
.preheader.preheader.i:12  %right_border_buf_0_val_1_2_11 = select i1 %sel_tmp2, i8 %right_border_buf_0_val_1_2_3_34, i8 %right_border_buf_0_val_1_2

ST_6: stg_236 [1/1] 1.62ns
.preheader.preheader.i:13  switch i2 %col_assign_2, label %branch11 [
    i2 0, label %branch9
    i2 1, label %branch10
  ]

ST_6: src_kernel_win_0_val_2_1_7 [1/1] 0.00ns
branch10:0  %src_kernel_win_0_val_2_1_7 = load i8* %right_border_buf_0_val_0_1, align 1

ST_6: stg_238 [1/1] 1.57ns
branch10:1  store i8 %right_border_buf_0_val_1_2_11, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_239 [1/1] 1.94ns
branch10:2  store i8 %src_kernel_win_0_val_2_1_7, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_240 [1/1] 1.57ns
branch10:3  store i8 %col_buf_0_val_0_0_9, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: src_kernel_win_0_val_2_1_6 [1/1] 0.00ns
branch9:0  %src_kernel_win_0_val_2_1_6 = load i8* %right_border_buf_0_val_0_0, align 1

ST_6: stg_242 [1/1] 1.57ns
branch9:1  store i8 %right_border_buf_0_val_1_2_11, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_243 [1/1] 1.94ns
branch9:2  store i8 %src_kernel_win_0_val_2_1_6, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_244 [1/1] 1.57ns
branch9:3  store i8 %col_buf_0_val_0_0_9, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: src_kernel_win_0_val_2_1_5 [1/1] 0.00ns
branch11:0  %src_kernel_win_0_val_2_1_5 = load i8* %right_border_buf_0_val_0_2, align 1

ST_6: stg_246 [1/1] 1.57ns
branch11:1  store i8 %right_border_buf_0_val_1_2_11, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_247 [1/1] 1.94ns
branch11:2  store i8 %src_kernel_win_0_val_2_1_5, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_248 [1/1] 1.57ns
branch11:3  store i8 %col_buf_0_val_0_0_9, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: stg_249 [1/1] 1.57ns
.loopexit222.i.pre:0  store i8 %right_border_buf_0_val_1_0, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_250 [1/1] 1.94ns
.loopexit222.i.pre:1  store i8 %src_kernel_win_0_val_2_0, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_251 [1/1] 1.57ns
.loopexit222.i.pre:2  store i8 %right_border_buf_0_val_2_0, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: stg_252 [1/1] 0.00ns
branch13:0  store i8 %src_kernel_win_0_val_2_0, i8* %right_border_buf_0_val_0_1, align 1

ST_6: stg_253 [1/1] 0.00ns
branch13:1  br label %"operator().exit283.i257"

ST_6: stg_254 [1/1] 0.00ns
branch12:0  store i8 %src_kernel_win_0_val_2_0, i8* %right_border_buf_0_val_0_0, align 1

ST_6: stg_255 [1/1] 0.00ns
branch12:1  br label %"operator().exit283.i257"

ST_6: stg_256 [1/1] 0.00ns
branch14:0  store i8 %src_kernel_win_0_val_2_0, i8* %right_border_buf_0_val_0_2, align 1

ST_6: stg_257 [1/1] 0.00ns
branch14:1  br label %"operator().exit283.i257"

ST_6: right_border_buf_0_val_1_2_s [1/1] 0.00ns
operator().exit283.i257:0  %right_border_buf_0_val_1_2_s = load i8* %right_border_buf_0_val_1_2_1, align 1

ST_6: right_border_buf_0_val_1_2_1_32 [1/1] 0.00ns
operator().exit283.i257:1  %right_border_buf_0_val_1_2_1_32 = load i8* %right_border_buf_0_val_1_2_2, align 1

ST_6: right_border_buf_0_val_1_2_2_33 [1/1] 0.00ns
operator().exit283.i257:2  %right_border_buf_0_val_1_2_2_33 = load i8* %right_border_buf_0_val_1_2_7, align 1

ST_6: stg_261 [1/1] 2.39ns
operator().exit283.i257:3  store i8 %right_border_buf_0_val_1_0, i8* %k_buf_0_val_2_addr, align 1

ST_6: sel_tmp6 [1/1] 1.36ns
operator().exit283.i257:4  %sel_tmp6 = icmp eq i2 %col_assign, 1

ST_6: right_border_buf_0_val_1_2_3 [1/1] 1.37ns
operator().exit283.i257:5  %right_border_buf_0_val_1_2_3 = select i1 %sel_tmp6, i8 %right_border_buf_0_val_1_2_2_33, i8 %right_border_buf_0_val_1_0

ST_6: sel_tmp7 [1/1] 1.36ns
operator().exit283.i257:6  %sel_tmp7 = icmp eq i2 %col_assign, 0

ST_6: right_border_buf_0_val_1_2_4 [1/1] 1.37ns
operator().exit283.i257:7  %right_border_buf_0_val_1_2_4 = select i1 %sel_tmp7, i8 %right_border_buf_0_val_1_2_2_33, i8 %right_border_buf_0_val_1_2_3

ST_6: right_border_buf_0_val_1_2_5 [1/1] 1.37ns
operator().exit283.i257:8  %right_border_buf_0_val_1_2_5 = select i1 %sel_tmp6, i8 %right_border_buf_0_val_1_0, i8 %right_border_buf_0_val_1_2_1_32

ST_6: right_border_buf_0_val_1_2_6 [1/1] 1.37ns
operator().exit283.i257:9  %right_border_buf_0_val_1_2_6 = select i1 %sel_tmp7, i8 %right_border_buf_0_val_1_2_1_32, i8 %right_border_buf_0_val_1_2_5

ST_6: right_border_buf_0_val_1_2_8 [1/1] 1.37ns
operator().exit283.i257:10  %right_border_buf_0_val_1_2_8 = select i1 %sel_tmp7, i8 %right_border_buf_0_val_1_0, i8 %right_border_buf_0_val_1_2_s

ST_6: stg_269 [1/1] 2.39ns
operator().exit283.i257:11  store i8 %right_border_buf_0_val_2_0, i8* %k_buf_0_val_1_addr, align 1

ST_6: stg_270 [1/1] 1.62ns
operator().exit283.i257:12  switch i2 %col_assign, label %branch26 [
    i2 0, label %._crit_edge234.i.1.pre
    i2 1, label %branch25
  ]

ST_6: stg_271 [1/1] 0.00ns
branch25:0  store i8 %right_border_buf_0_val_1_2_4, i8* %right_border_buf_0_val_1_2_7, align 1

ST_6: stg_272 [1/1] 0.00ns
branch25:1  store i8 %right_border_buf_0_val_1_2_6, i8* %right_border_buf_0_val_1_2_2, align 1

ST_6: stg_273 [1/1] 0.00ns
branch25:2  store i8 %right_border_buf_0_val_1_2_8, i8* %right_border_buf_0_val_1_2_1, align 1

ST_6: stg_274 [1/1] 0.00ns
branch25:3  store i8 %right_border_buf_0_val_2_0, i8* %col_buf_0_val_0_0_5, align 1

ST_6: stg_275 [1/1] 0.00ns
branch25:4  br label %._crit_edge234.i.1

ST_6: stg_276 [1/1] 0.00ns
._crit_edge234.i.1.pre:0  store i8 %right_border_buf_0_val_1_2_4, i8* %right_border_buf_0_val_1_2_7, align 1

ST_6: stg_277 [1/1] 0.00ns
._crit_edge234.i.1.pre:1  store i8 %right_border_buf_0_val_1_2_6, i8* %right_border_buf_0_val_1_2_2, align 1

ST_6: stg_278 [1/1] 0.00ns
._crit_edge234.i.1.pre:2  store i8 %right_border_buf_0_val_1_2_8, i8* %right_border_buf_0_val_1_2_1, align 1

ST_6: stg_279 [1/1] 0.00ns
._crit_edge234.i.1.pre:3  store i8 %right_border_buf_0_val_2_0, i8* %col_buf_0_val_0_0_6, align 1

ST_6: stg_280 [1/1] 0.00ns
._crit_edge234.i.1.pre:4  br label %._crit_edge234.i.1

ST_6: stg_281 [1/1] 0.00ns
branch26:0  store i8 %right_border_buf_0_val_1_2_4, i8* %right_border_buf_0_val_1_2_7, align 1

ST_6: stg_282 [1/1] 0.00ns
branch26:1  store i8 %right_border_buf_0_val_1_2_6, i8* %right_border_buf_0_val_1_2_2, align 1

ST_6: stg_283 [1/1] 0.00ns
branch26:2  store i8 %right_border_buf_0_val_1_2_8, i8* %right_border_buf_0_val_1_2_1, align 1

ST_6: stg_284 [1/1] 0.00ns
branch26:3  store i8 %right_border_buf_0_val_2_0, i8* %col_buf_0_val_0_0_3, align 1

ST_6: stg_285 [1/1] 0.00ns
branch26:4  br label %._crit_edge234.i.1

ST_6: stg_286 [1/1] 2.39ns
._crit_edge234.i.1.critedge.critedge:0  store i8 %right_border_buf_0_val_1_0, i8* %k_buf_0_val_2_addr, align 1

ST_6: stg_287 [1/1] 2.39ns
._crit_edge234.i.1.critedge.critedge:1  store i8 %right_border_buf_0_val_2_0, i8* %k_buf_0_val_1_addr, align 1

ST_6: stg_288 [1/1] 0.00ns
._crit_edge234.i.1.critedge.critedge:2  br label %._crit_edge234.i.1

ST_6: tmp_46 [1/1] 1.70ns
._crit_edge234.i.1:0  %tmp_46 = call i8 @_ssdm_op_Read.ap_fifo.volatile.i8P(i8* %p_src_data_stream_V)

ST_6: stg_290 [1/1] 2.39ns
._crit_edge234.i.1:1  store i8 %tmp_46, i8* %k_buf_0_val_0_addr, align 1

ST_6: stg_291 [1/1] 1.57ns
._crit_edge234.i.1:2  store i8 %right_border_buf_0_val_1_0, i8* %src_kernel_win_0_val_1_1, align 1

ST_6: stg_292 [1/1] 1.94ns
._crit_edge234.i.1:3  store i8 %src_kernel_win_0_val_2_0, i8* %src_kernel_win_0_val_2_1, align 1

ST_6: stg_293 [1/1] 1.57ns
._crit_edge234.i.1:4  store i8 %right_border_buf_0_val_2_0, i8* %src_kernel_win_0_val_0_1, align 1

ST_6: stg_294 [1/1] 0.00ns
.loopexit222.i:0  br i1 %or_cond219_i, label %.preheader, label %._crit_edge238.i


 <State 7>: 8.39ns
ST_7: src_kernel_win_0_val_0_1_lo [1/1] 0.00ns
.preheader:0  %src_kernel_win_0_val_0_1_lo = load i8* %src_kernel_win_0_val_0_1, align 1

ST_7: src_kernel_win_0_val_0_2_lo [1/1] 0.00ns
.preheader:1  %src_kernel_win_0_val_0_2_lo = load i8* %src_kernel_win_0_val_0_2, align 1

ST_7: src_kernel_win_0_val_2_1_lo [1/1] 0.00ns
.preheader:2  %src_kernel_win_0_val_2_1_lo = load i8* %src_kernel_win_0_val_2_1, align 1

ST_7: src_kernel_win_0_val_1_1_lo [1/1] 0.00ns
.preheader:3  %src_kernel_win_0_val_1_1_lo = load i8* %src_kernel_win_0_val_1_1, align 1

ST_7: src_kernel_win_0_val_1_2_lo [1/1] 0.00ns
.preheader:4  %src_kernel_win_0_val_1_2_lo = load i8* %src_kernel_win_0_val_1_2, align 1

ST_7: src_kernel_win_0_val_2_2_lo [1/1] 0.00ns
.preheader:5  %src_kernel_win_0_val_2_2_lo = load i8* %src_kernel_win_0_val_2_2, align 1

ST_7: OP1_V_0_cast [1/1] 0.00ns
.preheader:6  %OP1_V_0_cast = zext i8 %src_kernel_win_0_val_2_2_lo to i9

ST_7: tmp_147_0_2_cast [1/1] 0.00ns
.preheader:7  %tmp_147_0_2_cast = zext i8 %src_kernel_win_0_val_2_1_lo to i9

ST_7: p_Val2_3_0_2 [1/1] 1.72ns
.preheader:8  %p_Val2_3_0_2 = sub i9 %tmp_147_0_2_cast, %OP1_V_0_cast

ST_7: p_Val2_3_0_2_cast_cast [1/1] 0.00ns
.preheader:9  %p_Val2_3_0_2_cast_cast = sext i9 %p_Val2_3_0_2 to i10

ST_7: p_shl [1/1] 0.00ns
.preheader:10  %p_shl = call i9 @_ssdm_op_BitConcatenate.i9.i8.i1(i8 %src_kernel_win_0_val_1_2_lo, i1 false)

ST_7: p_shl_cast [1/1] 0.00ns
.preheader:11  %p_shl_cast = zext i9 %p_shl to i10

ST_7: p_Val2_s [1/1] 1.84ns
.preheader:12  %p_Val2_s = sub i10 0, %p_shl_cast

ST_7: tmp_147_1_cast [1/1] 0.00ns
.preheader:13  %tmp_147_1_cast = sext i10 %p_Val2_s to i11

ST_7: p_Val2_114_2 [1/1] 0.00ns
.preheader:14  %p_Val2_114_2 = call i9 @_ssdm_op_BitConcatenate.i9.i8.i1(i8 %src_kernel_win_0_val_1_1_lo, i1 false)

ST_7: tmp_147_1_cast_37 [1/1] 0.00ns
.preheader:15  %tmp_147_1_cast_37 = zext i9 %p_Val2_114_2 to i11

ST_7: OP1_V_2_cast [1/1] 0.00ns
.preheader:16  %OP1_V_2_cast = zext i8 %src_kernel_win_0_val_0_2_lo to i9

ST_7: p_Val2_2 [1/1] 1.72ns
.preheader:17  %p_Val2_2 = sub i9 0, %OP1_V_2_cast

ST_7: tmp_147_2_cast [1/1] 0.00ns
.preheader:18  %tmp_147_2_cast = sext i9 %p_Val2_2 to i11

ST_7: tmp_147_2_2_cast_cast [1/1] 0.00ns
.preheader:19  %tmp_147_2_2_cast_cast = zext i8 %src_kernel_win_0_val_0_1_lo to i10

ST_7: tmp25 [1/1] 1.37ns
.preheader:20  %tmp25 = add i11 %tmp_147_1_cast, %tmp_147_2_cast

ST_7: tmp26 [1/1] 1.84ns
.preheader:21  %tmp26 = add i10 %p_Val2_3_0_2_cast_cast, %tmp_147_2_2_cast_cast

ST_7: tmp132_cast [1/1] 0.00ns
.preheader:22  %tmp132_cast = sext i10 %tmp26 to i11

ST_7: tmp27 [1/1] 1.84ns
.preheader:23  %tmp27 = add i11 %tmp132_cast, %tmp_147_1_cast_37

ST_7: p_Val2_1 [1/1] 1.37ns
.preheader:24  %p_Val2_1 = add i11 %tmp27, %tmp25

ST_7: isneg [1/1] 0.00ns
.preheader:25  %isneg = call i1 @_ssdm_op_BitSelect.i1.i11.i32(i11 %p_Val2_1, i32 10)

ST_7: p_Val2_3 [1/1] 0.00ns
.preheader:26  %p_Val2_3 = trunc i11 %p_Val2_1 to i8

ST_7: tmp_28 [1/1] 0.00ns
.preheader:27  %tmp_28 = call i3 @_ssdm_op_PartSelect.i3.i11.i32.i32(i11 %p_Val2_1, i32 8, i32 10)

ST_7: not_i_i_i [1/1] 1.62ns
.preheader:29  %not_i_i_i = icmp ne i3 %tmp_28, 0

ST_7: empty [1/1] 0.00ns
._crit_edge238.i:0  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str1814, i32 %tmp_9)

ST_7: stg_325 [1/1] 0.00ns
._crit_edge238.i:1  store i8 %src_kernel_win_0_val_2_1_9, i8* %src_kernel_win_0_val_2_2, align 1

ST_7: stg_326 [1/1] 0.00ns
._crit_edge238.i:2  store i8 %src_kernel_win_0_val_1_1_6, i8* %src_kernel_win_0_val_1_2, align 1

ST_7: stg_327 [1/1] 0.00ns
._crit_edge238.i:3  store i8 %src_kernel_win_0_val_0_1_6, i8* %src_kernel_win_0_val_0_2, align 1

ST_7: stg_328 [1/1] 0.00ns
._crit_edge238.i:4  br label %2


 <State 8>: 7.18ns
ST_8: tmp_i_i [1/1] 1.37ns
.preheader:28  %tmp_i_i = xor i1 %isneg, true

ST_8: overflow [1/1] 1.37ns
.preheader:30  %overflow = and i1 %not_i_i_i, %tmp_i_i

ST_8: p_mux_i_i_cast [1/1] 1.37ns
.preheader:31  %p_mux_i_i_cast = select i1 %tmp_i_i, i8 -1, i8 0

ST_8: tmp_i_i_38 [1/1] 1.37ns
.preheader:32  %tmp_i_i_38 = or i1 %isneg, %overflow

ST_8: p_Val2_s_39 [1/1] 1.37ns
.preheader:33  %p_Val2_s_39 = select i1 %tmp_i_i_38, i8 %p_mux_i_i_cast, i8 %p_Val2_3

ST_8: stg_334 [1/1] 1.70ns
.preheader:34  call void @_ssdm_op_Write.ap_fifo.volatile.i8P(i8* %p_dst_data_stream_V, i8 %p_Val2_s_39)

ST_8: stg_335 [1/1] 0.00ns
.preheader:35  br label %._crit_edge238.i


 <State 9>: 0.00ns
ST_9: empty_40 [1/1] 0.00ns
:0  %empty_40 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str1813, i32 %tmp)

ST_9: stg_337 [1/1] 0.00ns
:1  br label %0



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
